/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MentorService } from "../mentor.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MentorCreateInput } from "./MentorCreateInput";
import { Mentor } from "./Mentor";
import { MentorFindManyArgs } from "./MentorFindManyArgs";
import { MentorWhereUniqueInput } from "./MentorWhereUniqueInput";
import { MentorUpdateInput } from "./MentorUpdateInput";
import { LessonFindManyArgs } from "../../lesson/base/LessonFindManyArgs";
import { Lesson } from "../../lesson/base/Lesson";
import { LessonWhereUniqueInput } from "../../lesson/base/LessonWhereUniqueInput";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { ReviewWhereUniqueInput } from "../../review/base/ReviewWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MentorControllerBase {
  constructor(
    protected readonly service: MentorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Mentor })
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMentor(@common.Body() data: MentorCreateInput): Promise<Mentor> {
    return await this.service.createMentor({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        profileDescription: true,
        rating: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Mentor] })
  @ApiNestedQuery(MentorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mentors(@common.Req() request: Request): Promise<Mentor[]> {
    const args = plainToClass(MentorFindManyArgs, request.query);
    return this.service.mentors({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        profileDescription: true,
        rating: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Mentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async mentor(
    @common.Param() params: MentorWhereUniqueInput
  ): Promise<Mentor | null> {
    const result = await this.service.mentor({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        profileDescription: true,
        rating: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Mentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMentor(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() data: MentorUpdateInput
  ): Promise<Mentor | null> {
    try {
      return await this.service.updateMentor({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          profileDescription: true,
          rating: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Mentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMentor(
    @common.Param() params: MentorWhereUniqueInput
  ): Promise<Mentor | null> {
    try {
      return await this.service.deleteMentor({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          profileDescription: true,
          rating: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/lessons")
  @ApiNestedQuery(LessonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Lesson",
    action: "read",
    possession: "any",
  })
  async findLessons(
    @common.Req() request: Request,
    @common.Param() params: MentorWhereUniqueInput
  ): Promise<Lesson[]> {
    const query = plainToClass(LessonFindManyArgs, request.query);
    const results = await this.service.findLessons(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        mentor: {
          select: {
            id: true,
          },
        },

        price: true,
        schedule: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lessons")
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "update",
    possession: "any",
  })
  async connectLessons(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        connect: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lessons")
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "update",
    possession: "any",
  })
  async updateLessons(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        set: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lessons")
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "update",
    possession: "any",
  })
  async disconnectLessons(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        disconnect: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/reviews")
  @ApiNestedQuery(ReviewFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Review",
    action: "read",
    possession: "any",
  })
  async findReviews(
    @common.Req() request: Request,
    @common.Param() params: MentorWhereUniqueInput
  ): Promise<Review[]> {
    const query = plainToClass(ReviewFindManyArgs, request.query);
    const results = await this.service.findReviews(params.id, {
      ...query,
      select: {
        comment: true,
        createdAt: true,
        id: true,

        mentor: {
          select: {
            id: true,
          },
        },

        rating: true,
        updatedAt: true,
        user: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "update",
    possession: "any",
  })
  async connectReviews(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        connect: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "update",
    possession: "any",
  })
  async updateReviews(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        set: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reviews")
  @nestAccessControl.UseRoles({
    resource: "Mentor",
    action: "update",
    possession: "any",
  })
  async disconnectReviews(
    @common.Param() params: MentorWhereUniqueInput,
    @common.Body() body: ReviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reviews: {
        disconnect: body,
      },
    };
    await this.service.updateMentor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
